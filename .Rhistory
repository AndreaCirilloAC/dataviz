View(segments)
segments <- getBreaks(Segmentor(data = dataset$maturities,model = 1, Kmax = 4))
View(segments)
mode(segments)
segments <- as.data.frame(getBreaks(Segmentor(data = dataset$maturities,model = 1, Kmax = 4)))
segment <- segments[1,]
View(segment)
segment <- segments[4,]
View(segment)
View(segments)
cumsum(maturities)
cumsum(1:segment[1,1])
View(dataset)
dataset$cum_total <- cumsum(dataset$amounts)
dataset$amounts[1,2]+dataset$amounts[2,2]
dataset[1,2]+dataset[2,2]
dataset[1,2]+dataset[2,2]+dataset[3,2]
maturities <- seq(1:21)
sigma = 0.6
mu = 1
amounts <- dlnorm(maturities, mu, sigma)*1000000000
spread  <- 1.1 ^ (maturities - 1)/100
dataset <- data.frame(maturities,amounts,spread,weighted_spread = amounts*spread,
cum_weighted_spread = cumsum(weighted_spread))
# define segmentation
segments <- as.data.frame(getBreaks(Segmentor(data = dataset$maturities,model = 1, Kmax = 4)))
dataset <- data.frame(maturities,amounts,spread,weighted_spread = amounts*spread,
cum_weighted_spread = cumsum(weighted_spread)
# simulation data
maturities <- seq(1:21)
sigma = 0.6
mu = 1
amounts <- dlnorm(maturities, mu, sigma)*1000000000
spread  <- 1.1 ^ (maturities - 1)/100
dataset <- data.frame(maturities,amounts,spread,weighted_spread = amounts*spread,
cum_weighted_spread = cumsum(weighted_spread)
maturities <- seq(1:21)
maturities <- seq(1:21)
sigma = 0.6
mu = 1
amounts <- dlnorm(maturities, mu, sigma)*1000000000
spread  <- 1.1 ^ (maturities - 1)/100
dataset <- data.frame(maturities,amounts,spread,weighted_spread = amounts*spread,
cum_weighted_spread = cumsum(weighted_spread))
maturities <- seq(1:21)
sigma = 0.6
mu = 1
amounts             <- dlnorm(maturities, mu, sigma)*1000000000
spread              <- 1.1 ^ (maturities - 1)/100
weighted_spread     <-  amounts*spread
cum_weighted_spread <-  cumsum(weighted_spread)
dataset <- data.frame(maturities,amounts,spread,weighted_spread, cum_weighted_spread)
segments <- as.data.frame(getBreaks(Segmentor(data = dataset$maturities,model = 1, Kmax = 4)))
segment <- segments[4,]
mean_1st_bucket <- dataset[segments[4,1],5]
mean_1st_bucket <- dataset[segments[4,1],5]/segments[4,1]
1657952+3208678.840
3000*0.02+4000*0.03/(0.03+0.02)
3000*0.02+4000*0.03/(7000)
(3000*0.02+4000*0.03)/(7000)
dataset$weighted_spread[1]
maturities <- seq(1:21)
sigma = 0.6
mu = 1
amounts             <- dlnorm(maturities, mu, sigma)*1000000000
spread              <- 1.1 ^ (maturities - 1)/100
weighted_spread     <-  amounts*spread
sum_weighted_spread <-  cumsum(weighted_spread)
sum_amount          <-  cumsum(amounts)
dataset <- data.frame(maturities,amounts,spread,weighted_spread, cum_weighted_spread)
# define segmentation
segments <- as.data.frame(getBreaks(Segmentor(data = dataset$maturities,model = 1, Kmax = 4)))
segment <- segments[4,]
maturities <- seq(1:21)
sigma = 0.6
mu = 1
amounts             <- dlnorm(maturities, mu, sigma)*1000000000
spread              <- 1.1 ^ (maturities - 1)/100
weighted_spread     <-  amounts*spread
sum_weighted_spread <-  cumsum(weighted_spread)
sum_amounts          <-  cumsum(amounts)
dataset <- data.frame(maturities,amounts,spread,weighted_spread, sum_weighted_spread,sum_amounts)
# define segmentation
segments <- as.data.frame(getBreaks(Segmentor(data = dataset$maturities,model = 1, Kmax = 4)))
segment <- segments[4,]
#sum weighted spread /sum amount
mean_1st_bucket <- dataset$sum_wr
mean_1st_bucket <- dataset$sum_weighted_spread[segment[1]]/sum_amounts[segment[1]]
segment <- c(segments[4,])
mean_1st_bucket <- dataset$sum_weighted_spread[segment[1]]/sum_amounts[segment[1]]
segment <- as.vector(segments[4,])
mean_1st_bucket <- dataset$sum_weighted_spread[segment[1]]/sum_amounts[segment[1]]
mean_1st_bucket <- dataset$sum_weighted_spread[segment[1,1]]/sum_amounts[segment[1,1]]
View(segment)
7512433/676154615
mean_snd_bucket <- (dataset$sum_weighted_spread[segment[1,2]] - dataset$sum_weighted_spread[segment[1,1]])/
(sum_amounts[segment[1,2]]-sum_amounts[segment[1,1]])
(12243308-7512433)/(980938257-676154615)
(12026995-7512433)/(980938257-676154615)
maturities <- seq(1:21)
sigma = 0.6
mu = 1
amounts             <- dlnorm(maturities, mu, sigma)*1000000000
spread              <- 1.1 ^ (maturities - 1)/100
weighted_spread     <-  amounts*spread
sum_weighted_spread <-  cumsum(weighted_spread)
sum_amounts          <-  cumsum(amounts)
dataset <- data.frame(maturities,amounts,spread,weighted_spread, sum_weighted_spread,sum_amounts)
# define segmentation
segments <- as.data.frame(getBreaks(Segmentor(data = dataset$maturities,model = 1, Kmax = nrow(dataset))))
i = 4
breaks <- as.vector(segments[i,1:i])
View(segments)
View(breaks)
?ifelse
segment <- as.vector(segments[4,])
bucket_simulator <- function(number_of_buckets){
breaks_list <- as.vector(segments[number_of_buckets,1:number_of_buckets])
for (i in 1:number_of_buckets) {
ifelse(i == 1,
mean_spread <<- dataset$sum_weighted_spread[breaks_list[1,i]]/sum_amounts[breaks_list[1,i]],
mean_spread <<- (dataset$sum_weighted_spread[breaks_list[1,i]] - dataset$sum_weighted_spread[breaks_list[1,i]])/
(sum_amounts[breaks_list[1,i]] - sum_amounts[breaks_list[1,i]])
)
print(mean_spread)
}
}
bucket_simulator(4)
mean_1st_bucket <- dataset$sum_weighted_spread[segment[1,1]]/sum_amounts[segment[1,1]]
mean_snd_bucket <- (dataset$sum_weighted_spread[segment[1,2]] - dataset$sum_weighted_spread[segment[1,1]])/
for (i in 1:number_of_buckets) {
ifelse(i == 1,
mean_spread <<- dataset$sum_weighted_spread[breaks_list[1,i]]/sum_amounts[breaks_list[1,i]],
mean_spread <<- (dataset$sum_weighted_spread[breaks_list[1,i]] - dataset$sum_weighted_spread[breaks_list[1,i-1]])/
(sum_amounts[breaks_list[1,i]] - sum_amounts[breaks_list[1,i-1]])
)
print(mean_spread)
}
}
bucket_simulator <- function(number_of_buckets){
breaks_list <- as.vector(segments[number_of_buckets,1:number_of_buckets])
for (i in 1:number_of_buckets) {
ifelse(i == 1,
mean_spread <<- dataset$sum_weighted_spread[breaks_list[1,i]]/sum_amounts[breaks_list[1,i]],
mean_spread <<- (dataset$sum_weighted_spread[breaks_list[1,i]] - dataset$sum_weighted_spread[breaks_list[1,i-1]])/
(sum_amounts[breaks_list[1,i]] - sum_amounts[breaks_list[1,i-1]])
)
print(mean_spread)
}
}
bucket_simulator(4)
mean_snd_bucket <- (dataset$sum_weighted_spread[segment[1,2]] - dataset$sum_weighted_spread[segment[1,1]])/
(sum_amounts[segment[1,2]] - sum_amounts[segment[1,1]])
?rbins
?rbind
a <- data.frame()
b <- c(1)
c <- c(3)
a <- rbind(a,b,c)
View(a)
a <- bind(a,b,c)
a <- cbind(a,b,c)
View(a)
bucket_simulator <- function(number_of_buckets){
maturity    <- c()
spread      <- c()
bucket_scenary <- data.frame()
breaks_list    <- as.vector(segments[number_of_buckets,1:number_of_buckets])
for (i in 1:number_of_buckets) {
ifelse(i == 1,
mean_spread <<- dataset$sum_weighted_spread[breaks_list[1,i]]/sum_amounts[breaks_list[1,i]],
mean_spread <<- (dataset$sum_weighted_spread[breaks_list[1,i]] - dataset$sum_weighted_spread[breaks_list[1,i-1]])/
(sum_amounts[breaks_list[1,i]] - sum_amounts[breaks_list[1,i-1]])
)
print(mean_spread)
maturity <- rbind(maturity,breaks_list[1,i])
spread   <- rbind(spread,mean_spread)
}
bucket_scenary <- rbind(maturity,spread)
return(bucket_scenary)
}
bucket_simulator(4)
View(bucket_simulator(4))
bucket_simulator <- function(number_of_buckets){
maturity    <- c()
spread      <- c()
bucket_scenary <- data.frame()
breaks_list    <- as.vector(segments[number_of_buckets,1:number_of_buckets])
for (i in 1:number_of_buckets) {
ifelse(i == 1,
mean_spread <<- dataset$sum_weighted_spread[breaks_list[1,i]]/sum_amounts[breaks_list[1,i]],
mean_spread <<- (dataset$sum_weighted_spread[breaks_list[1,i]] - dataset$sum_weighted_spread[breaks_list[1,i-1]])/
(sum_amounts[breaks_list[1,i]] - sum_amounts[breaks_list[1,i-1]])
)
print(mean_spread)
maturity <- rbind(maturity,breaks_list[1,i])
spread   <- rbind(spread,mean_spread)
}
bucket_scenary <- cbind(maturity,spread)
return(bucket_scenary)
}
View(bucket_simulator(4))
bucket_simulator <- function(number_of_buckets){
maturity    <- c()
spread      <- c()
bucket_scenary <- data.frame()
breaks_list    <- as.vector(segments[number_of_buckets,1:number_of_buckets])
for (i in 1:number_of_buckets) {
ifelse(i == 1,
mean_spread <<- dataset$sum_weighted_spread[breaks_list[1,i]]/sum_amounts[breaks_list[1,i]],
mean_spread <<- (dataset$sum_weighted_spread[breaks_list[1,i]] - dataset$sum_weighted_spread[breaks_list[1,i-1]])/
(sum_amounts[breaks_list[1,i]] - sum_amounts[breaks_list[1,i-1]])
)
print(mean_spread)
maturity <- rbind(maturity,breaks_list[1,i])
spread   <- rbind(spread,mean_spread)
}
bucket_scenary <- cbind("maturity"= maturity,"average_spread" = spread)
return(bucket_scenary)
}
View(bucket_simulator(4))
?cnames
?colnames
bucket_simulator <- function(number_of_buckets){
maturity    <- c()
spread      <- c()
bucket_scenary <- data.frame()
breaks_list    <- as.vector(segments[number_of_buckets,1:number_of_buckets])
for (i in 1:number_of_buckets) {
ifelse(i == 1,
mean_spread <<- dataset$sum_weighted_spread[breaks_list[1,i]]/sum_amounts[breaks_list[1,i]],
mean_spread <<- (dataset$sum_weighted_spread[breaks_list[1,i]] - dataset$sum_weighted_spread[breaks_list[1,i-1]])/
(sum_amounts[breaks_list[1,i]] - sum_amounts[breaks_list[1,i-1]])
)
print(mean_spread)
maturity <- rbind(maturity,breaks_list[1,i])
spread   <- rbind(spread,mean_spread)
}
bucket_scenary <- cbind("maturity" = maturity,"average_spread" = spread)
colnames(bucket_scenary) <- c("maturity","average_spread")
return(bucket_scenary)
}
View(bucket_simulator(4))
bucket_simulator <- function(number_of_buckets){
maturity    <- c()
spread      <- c()
bucket_scenary <- data.frame()
breaks_list    <- as.vector(segments[number_of_buckets,1:number_of_buckets])
for (i in 1:number_of_buckets) {
ifelse(i == 1,
mean_spread <<- dataset$sum_weighted_spread[breaks_list[1,i]]/sum_amounts[breaks_list[1,i]],
mean_spread <<- (dataset$sum_weighted_spread[breaks_list[1,i]] - dataset$sum_weighted_spread[breaks_list[1,i-1]])/
(sum_amounts[breaks_list[1,i]] - sum_amounts[breaks_list[1,i-1]])
)
print(mean_spread)
maturity <- rbind(maturity,breaks_list[1,i])
spread   <- rbind(spread,mean_spread)
}
bucket_scenary <- data.frame("maturity" = maturity,"average_spread" = spread)
return(bucket_scenary)
}
View(bucket_simulator(4))
plot(bucket_simulator(4))
library(ggplot2)
qplot(bucket_simulator(4))
bucket_simulator <- function(number_of_buckets){
maturity    <- c()
spread      <- c()
bucket_scenary <- data.frame()
breaks_list    <- as.vector(segments[number_of_buckets,1:number_of_buckets])
for (i in 1:number_of_buckets) {
ifelse(i == 1,
mean_spread <<- dataset$sum_weighted_spread[breaks_list[1,i]]/sum_amounts[breaks_list[1,i]],
mean_spread <<- (dataset$sum_weighted_spread[breaks_list[1,i]] - dataset$sum_weighted_spread[breaks_list[1,i-1]])/
(sum_amounts[breaks_list[1,i]] - sum_amounts[breaks_list[1,i-1]])
)
maturity <- rbind(maturity,breaks_list[1,i])
spread   <- rbind(spread,mean_spread)
}
bucket_scenary <- data.frame("maturity" = maturity,"average_spread" = spread)
return(bucket_scenary)
}
qplot(bucket_simulator(4))
data <- bucket_simulator(4)
qplot(data)
ggplot(data = data,aes(x=maturity,y=average_spread))
ggplot(data = data,aes(x=maturity,y=average_spread))+
geom_line()
results_lists <- list()
for (i in 2:nrows(dataset)){
result <- bucket_simulator(i)
result_lists <- c(results_lists,result)
}
results_lists <- list()
for (i in 2:nrow(dataset)){
result <- bucket_simulator(i)
result_lists <- c(results_lists,result)
}
warnings
warnings()
results_lists <- list()
for (i in 2:nrow(dataset)){
result <- bucket_simulator(i)
results_lists <- c(results_lists,result)
}
results_lists[1]
results_lists[[1]]
results_lists[[2]]
results_lists[2]
results_lists <- list()
for (i in 2:nrow(dataset)){
result <- bucket_simulator(i)
results_lists <- list(results_lists,result)
}
results_lists <- list()
for (i in 2:nrow(dataset)){
result <- bucket_simulator(i)
results_lists[i] <- result
}
results_lists[2]
results_lists <- list()
for (i in 2:nrow(dataset)) {
result <- bucket_simulator(i)
results_lists[i] <- list(result)
}
results_lists[2]
results_lists[21]
data <- results_lists[3]
ggplot(data = data,aes(x=maturity,y=average_spread))+
geom_line()
data <- data.frame(results_lists[3])
ggplot(data = data,aes(x=maturity,y=average_spread))+
geom_line()
maturities <- seq(1:21)
sigma = 0.6
mu = 1
amounts             <- dlnorm(maturities, mu, sigma)*1000000000
spread              <- 1.1 ^ (maturities - 1)/100
weighted_spread     <-  amounts*spread
sum_weighted_spread <-  cumsum(weighted_spread)
sum_amounts          <-  cumsum(amounts)
dataset <- data.frame(maturities,amounts,spread,weighted_spread, sum_weighted_spread,sum_amounts)
# define segmentation, applying poisson distribution ( reasonable given amounts distribution)
segments <- as.data.frame(getBreaks(Segmentor(data = dataset$maturities,model = 1, Kmax = nrow(dataset))))
segment <- as.vector(segments[4,])
# define a function to derive the average spread for a given hypothesis of buckets number
bucket_simulator <- function(number_of_buckets){
maturity    <- c()
spread      <- c()
bucket_scenary <- data.frame()
# from segments definition extract the hypothesis you are going to test
breaks_list    <- as.vector(segments[number_of_buckets,1:number_of_buckets])
for (i in 2:number_of_buckets) {
# compute average spread using cumulate values, differentiatinf case of
mean_spread <<- (dataset$sum_weighted_spread[breaks_list[1,i]] - dataset$sum_weighted_spread[breaks_list[1,i-1]])/
(sum_amounts[breaks_list[1,i]] - sum_amounts[breaks_list[1,i-1]])
maturity <- rbind(maturity,breaks_list[1,i])
spread   <- rbind(spread,mean_spread)
}
bucket_scenary <- data.frame("maturity" = maturity,"average_spread" = spread)
return(bucket_scenary)
}
# create a list storing simulations results for buckets from 2 to number of maturities
results_lists <- list()
for (i in 2:nrow(dataset)) {
result <- bucket_simulator(i)
results_lists[i] <- list(result)
}
#show results
data <- data.frame(results_lists[3])
ggplot(data = data,aes(x=maturity,y=average_spread))+
geom_line()
data <- data.frame(results_lists[4])
ggplot(data = data,aes(x=maturity,y=average_spread))+
geom_line()
install.packages("rmarkdown",type = "source")
library(rmarkdown)
install.packages("knitr")
library(shiny)
?observe
library(httr)
get("https://api.github.com/search/repositories?q=tetris+language:assembly&sort=stars&order=desc")
curlGetHeaders("https://api.github.com/search/repositories?q=tetris+language:assembly&sort=stars&order=desc")
test_string <- c("012","345",";.","kdj","KSR" ,"\n")
grep("[[:digit:]]",test_string, value = TRUE)
grep("[[:punct:]]",test_string, value = TRUE)
grep("[[:lower:]]",test_string, value = TRUE)
grep("[[:upper:]]",test_string, value = TRUE)
install.packages("waffle")
library(waffle)
colnames(mtcars)
library(dplyr)
str(mtcars)
mtcars %>% group_by(carb) %>% summarise(sum(qsec))
mtcars %>% group_by(carb) %>% summarise(sum(qsec)) %>% waffle*()
mtcars %>% group_by(carb) %>% summarise(sum(qsec)) %>% waffle()
mtcars %>% group_by(carb) %>% summarise(sum(qsec)) %>% waffle($qsec)
mtcars %>% group_by(carb) %>% summarise(sum(qsec)) %>% waffle($sum(qsec))
mtcars %>% group_by(carb) %>% summarise(sum(qsec))  -> table
waffle(table$`sum(qsec)`)
(table$`sum(qsec)`)
(table$`sum(qsec)`)/sum(table$`sum(qsec)`)
((table$`sum(qsec)`)/sum(table$`sum(qsec)`))*100
savings <- c(`Mortgage ($84,911)`=84911, `Auto and\ntuition loans ($14,414)`=14414,
`Home equity loans ($10,062)`=10062, `Credit Cards ($8,565)`=8565)
savings
waffle(savings)
waffle(savings/392)
sum(savings)
savings/392
home <- ("large"=100,"small"=20,"medium"=80)
home <- c("large"=100,"small"=20,"medium"=80)
waffle(home)
home <- c("large"=100,"small"=20,"medium"=80.2)
waffle(home)
waffle(home/10)
waffle(home/10,rows=7, size=0.5,
colors=c("#c7d4b6", "#a3aabd", "#a0d0de", "#97b5cf"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
waffle(home,rows=7, size=0.5,
colors=c("#c7d4b6", "#a3aabd", "#a0d0de", "#97b5cf"),
title="Average Household Savings Each Year",
xlab="1 square == $392")
waffle(home,rows=7, size=0.5,
colors=c("#c7d4b6", "#a3aabd", "#a0d0de", "#97b5cf"),
title="Average Household Savings Each Year",
xlab="1 square == 10 m2")
waffle(home,rows=7, size=0.5,
colors=c("#c7d4b6", "#a3aabd", "#a0d0de", "#97b5cf"),
title="Houses",
xlab="1 square == 10 m2")
install.packages("ggplot2")
install.packages("ggplot2")
?ggplot2
types <- c("source", "win.binary",
"mac.binary", "mac.binary.mavericks")
CRANmirror <- "http://cran.revolutionanalytics.com"
pdb <- lapply(types, function(x){
cran <- contrib.url(repos = CRANmirror,
type = x)
available.packages(contriburl = cran, type = x)
})
names(pdb) <- types
str(pdb, max.level = 1)
sapply(pdb, nrow)
install.packages(c("ggplot2","ggmap"))
library(ggplot2)
library(ggmap)
plot <- ggplot(data = iris, aes(x = Sepal.Length, y = Sepal.Width)) +
geom_point()
plot
text     <- "there are some cool correlations here"
location <- gglocator(1, xexpand = c(0,0), yexpand = c(0,0))
location <- gglocator(1, xexpand = c(0,0), yexpand = c(0,0))
demo()
demo(scoping)
?open.connection
install.packages(rmarkdown)
install.packages("rmarkdown")
library(rmarkdown)
install.packages("rmarkdown")
install.packages("rmarkdown")
setwd("~/Dropbox/R_projects/dataviz")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
library(rmarkdown)
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
